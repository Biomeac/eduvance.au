// src/app/api/staff-users/route.js
// This file is for Next.js App Router API routes.

// Make sure bcryptjs is installed: npm install bcryptjs
const bcrypt = require('bcryptjs');

// Supabase client initialization (ensure these are securely configured)
const { createClient } = require('@supabase/supabase-js');
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY; // THIS IS YOUR SECRET KEY

// Import security utilities
import { 
  authorizeStaff, 
  validateInput, 
  VALIDATION_SCHEMAS, 
  checkRateLimit, 
  getClientIP, 
  createSecurityError,
  addSecurityHeaders,
  sanitizeInput
} from '@/lib/security';

// Initialize Supabase client with the service role key for admin operations
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {
  auth: { persistSession: false } // Important for server-side, non-persisted sessions
});

// POST handler for creating a new staff user
export async function POST(request) {
  try {
    // Rate limiting check
    const clientIP = getClientIP(request);
    if (!checkRateLimit(clientIP, '/api/staff-users')) {
      return createSecurityError('Rate limit exceeded. Please try again later.', 429);
    }

    // Authorization check - only admins can create staff users
    const { authorized, error: authError } = await authorizeStaff(request, 'admin');
    if (!authorized) {
      return createSecurityError(authError, 403);
    }

    // Parse and sanitize the JSON body
    const rawData = await request.json();
    const { username, email, password, role } = sanitizeInput(rawData);

    // Enhanced validation using schema
    const validationErrors = validateInput({ username, email, password, role }, VALIDATION_SCHEMAS.staffUser);
    if (validationErrors.length > 0) {
      return createSecurityError(`Validation failed: ${validationErrors.join(', ')}`, 400);
    }

    // 1. Create the user in Supabase Auth using the admin client.
    const { data: authData, error: userCreationError } = await supabaseAdmin.auth.admin.createUser({
      email,
      password,
      email_confirm: true // Automatically confirms the user's email
    });

    if (userCreationError) {
      console.error('Supabase Auth user creation failed:', userCreationError.message);
      return new Response(JSON.stringify({ message: `Failed to create authentication user: ${userCreationError.message}` }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    const userId = authData.user.id; // Get the UUID generated by Supabase Auth

    // 2. Hash the password using bcrypt for storage in your custom 'staff_users' table.
    const password_hash = await bcrypt.hash(password, 10); // 10 is the number of salt rounds

    // 3. Insert the staff user details into your 'staff_users' table.
    const { data, error } = await supabaseAdmin.from('staff_users').insert({
      id: userId, // Link to the Supabase Auth user's UUID
      username,
      email,
      password_hash, // Store the bcrypt hashed password here
      role
    }).select();

    if (error) {
      console.error('Failed to insert into staff_users table:', error.message);
      // IMPORTANT: If the insertion into 'staff_users' fails, delete the Auth user
      // to prevent orphaned authentication records.
      await supabaseAdmin.auth.admin.deleteUser(userId);
      return new Response(JSON.stringify({ message: `Failed to create staff user record: ${error.message}` }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    // Return a success response with the created user data
    const response = new Response(JSON.stringify({ 
      message: 'Staff user created successfully', 
      user: { id: data[0].id, username: data[0].username, email: data[0].email, role: data[0].role }
    }), {
      status: 201,
      headers: { 'Content-Type': 'application/json' },
    });

    return addSecurityHeaders(response);

  } catch (error) {
    // Catch any unexpected errors during the process
    console.error('Unhandled error during staff user creation:', error.message);
    
    // Don't expose internal error details
    const response = new Response(JSON.stringify({ 
      message: 'Internal server error during user creation.',
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });

    return addSecurityHeaders(response);
  }
}